{
  "_args": [
    [
      {
        "raw": "get-stream@^5.1.0",
        "scope": null,
        "escapedName": "get-stream",
        "name": "get-stream",
        "rawSpec": "^5.1.0",
        "spec": ">=5.1.0 <6.0.0",
        "type": "range"
      },
      "C:\\Users\\rajat joshi\\Desktop\\hacktober\\E-Library-frontend\\node_modules\\cacheable-request"
    ]
  ],
  "_from": "get-stream@^5.1.0",
  "_hasShrinkwrap": false,
  "_id": "get-stream@5.2.0",
  "_location": "/cacheable-request/get-stream",
  "_nodeVersion": "14.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/get-stream_5.2.0_1597007197450_0.5569560050452633"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "get-stream@^5.1.0",
    "scope": null,
    "escapedName": "get-stream",
    "name": "get-stream",
    "rawSpec": "^5.1.0",
    "spec": ">=5.1.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/cacheable-request"
  ],
  "_resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
  "_shasum": "4966a1795ee5ace65e706c4b7beb71257d6e22d3",
  "_shrinkwrap": null,
  "_spec": "get-stream@^5.1.0",
  "_where": "C:\\Users\\rajat joshi\\Desktop\\hacktober\\E-Library-frontend\\node_modules\\cacheable-request",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "https://sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/get-stream/issues"
  },
  "dependencies": {
    "pump": "^3.0.0"
  },
  "description": "Get a stream as a string, buffer, or array",
  "devDependencies": {
    "@types/node": "^12.0.7",
    "ava": "^2.0.0",
    "into-stream": "^5.0.0",
    "tsd": "^0.7.2",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
    "shasum": "4966a1795ee5ace65e706c4b7beb71257d6e22d3",
    "tarball": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
    "fileCount": 6,
    "unpackedSize": 12397,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfMGVdCRA9TVsSAnZWagAAjswQAJbRMkEomo1FYWd0s9QD\nBJ9yCq2Xw0q8L/9L23Gr19E3pU6cSx3QQvJUYQyiX8v0M6fUt57rF8B+C5Jq\nawcn7AposeDLVv8G1HD1gvcTX514W3qSTZAPDCK6cmVxMM1LvpwDXL35pJy9\nPJjvZefqf/WdCgWtWaugF0x9o+jz2OnXEUz4nbEwDbkcEan3AdqMNcYnUxEy\natGpbvxhEVDKkp6J0YAWK1jo0/iumu/SueCT+U+/HfA+m5zKK/x4J71OrApF\nHLt8S6I9czx7Z3Z8SQlRnJvGgdULTnX5tdCqfxiVtvRXXjwGVil51ZBqHUax\npbbCAqCmhL6QIXV5JlG2utfZMvOiKkAwc3VF4Ko1sYOANrTOIEDrEj18IuhF\niabWrw58fsxqJdwfkeLqcPpx2gDciHNBJ+/PdMSVEfUUmEySummVyvA/Cdjh\nGVvPuH0qyFRtQeft1fylRR7GibAbNEm6Ji2ASdmH4FZqJdNqX/8sKwQVB0/A\njYI3+RaSODL2EGvsRpMRfcTu/LSGETnnNrDJx/rteCOjoqJvcdsP3Y0zs82O\nemWmboF4U1FPjtFNqghN1U8AxE7MjRw+xOLzhdyztW6T4iJKCKOEQmeayrqS\nWqbsTuZ0O1H7g7hz2mt8WWFKL54IIGIzSRC1uQa18s2EB3NMAPQKJMyKOvUq\nRz7k\r\n=hjjZ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=8"
  },
  "files": [
    "index.js",
    "index.d.ts",
    "buffer-stream.js"
  ],
  "funding": "https://github.com/sponsors/sindresorhus",
  "gitHead": "010d8deaa2c966f2d230cac5cacee20e29d028c6",
  "homepage": "https://github.com/sindresorhus/get-stream#readme",
  "keywords": [
    "get",
    "stream",
    "promise",
    "concat",
    "string",
    "text",
    "buffer",
    "read",
    "data",
    "consume",
    "readable",
    "readablestream",
    "array",
    "object"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "get-stream",
  "optionalDependencies": {},
  "readme": "# get-stream [![Build Status](https://travis-ci.com/sindresorhus/get-stream.svg?branch=master)](https://travis-ci.com/github/sindresorhus/get-stream)\n\n> Get a stream as a string, buffer, or array\n\n## Install\n\n```\n$ npm install get-stream\n```\n\n## Usage\n\n```js\nconst fs = require('fs');\nconst getStream = require('get-stream');\n\n(async () => {\n\tconst stream = fs.createReadStream('unicorn.txt');\n\n\tconsole.log(await getStream(stream));\n\t/*\n\t              ,,))))))));,\n\t           __)))))))))))))),\n\t\\|/       -\\(((((''''((((((((.\n\t-*-==//////((''  .     `)))))),\n\t/|\\      ))| o    ;-.    '(((((                                  ,(,\n\t         ( `|    /  )    ;))))'                               ,_))^;(~\n\t            |   |   |   ,))((((_     _____------~~~-.        %,;(;(>';'~\n\t            o_);   ;    )))(((` ~---~  `::           \\      %%~~)(v;(`('~\n\t                  ;    ''''````         `:       `:::|\\,__,%%    );`'; ~\n\t                 |   _                )     /      `:|`----'     `-'\n\t           ______/\\/~    |                 /        /\n\t         /~;;.____/;;'  /          ___--,-(   `;;;/\n\t        / //  _;______;'------~~~~~    /;;/\\    /\n\t       //  | |                        / ;   \\;;,\\\n\t      (<_  | ;                      /',/-----'  _>\n\t       \\_| ||_                     //~;~~~~~~~~~\n\t           `\\_|                   (,~~\n\t                                   \\~\\\n\t                                    ~~\n\t*/\n})();\n```\n\n## API\n\nThe methods returns a promise that resolves when the `end` event fires on the stream, indicating that there is no more data to be read. The stream is switched to flowing mode.\n\n### getStream(stream, options?)\n\nGet the `stream` as a string.\n\n#### options\n\nType: `object`\n\n##### encoding\n\nType: `string`\\\nDefault: `'utf8'`\n\n[Encoding](https://nodejs.org/api/buffer.html#buffer_buffer) of the incoming stream.\n\n##### maxBuffer\n\nType: `number`\\\nDefault: `Infinity`\n\nMaximum length of the returned string. If it exceeds this value before the stream ends, the promise will be rejected with a `getStream.MaxBufferError` error.\n\n### getStream.buffer(stream, options?)\n\nGet the `stream` as a buffer.\n\nIt honors the `maxBuffer` option as above, but it refers to byte length rather than string length.\n\n### getStream.array(stream, options?)\n\nGet the `stream` as an array of values.\n\nIt honors both the `maxBuffer` and `encoding` options. The behavior changes slightly based on the encoding chosen:\n\n- When `encoding` is unset, it assumes an [object mode stream](https://nodesource.com/blog/understanding-object-streams/) and collects values emitted from `stream` unmodified. In this case `maxBuffer` refers to the number of items in the array (not the sum of their sizes).\n\n- When `encoding` is set to `buffer`, it collects an array of buffers. `maxBuffer` refers to the summed byte lengths of every buffer in the array.\n\n- When `encoding` is set to anything else, it collects an array of strings. `maxBuffer` refers to the summed character lengths of every string in the array.\n\n## Errors\n\nIf the input stream emits an `error` event, the promise will be rejected with the error. The buffered data will be attached to the `bufferedData` property of the error.\n\n```js\n(async () => {\n\ttry {\n\t\tawait getStream(streamThatErrorsAtTheEnd('unicorn'));\n\t} catch (error) {\n\t\tconsole.log(error.bufferedData);\n\t\t//=> 'unicorn'\n\t}\n})()\n```\n\n## FAQ\n\n### How is this different from [`concat-stream`](https://github.com/maxogden/concat-stream)?\n\nThis module accepts a stream instead of being one and returns a promise instead of using a callback. The API is simpler and it only supports returning a string, buffer, or array. It doesn't have a fragile type inference. You explicitly choose what you want. And it doesn't depend on the huge `readable-stream` package.\n\n## Related\n\n- [get-stdin](https://github.com/sindresorhus/get-stdin) - Get stdin as a string or buffer\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-get-stream?utm_source=npm-get-stream&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/get-stream.git"
  },
  "scripts": {
    "test": "xo && ava && tsd"
  },
  "version": "5.2.0"
}
